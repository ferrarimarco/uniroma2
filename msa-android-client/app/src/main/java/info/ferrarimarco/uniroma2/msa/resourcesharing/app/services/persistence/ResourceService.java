package info.ferrarimarco.uniroma2.msa.resourcesharing.app.services.persistence;

import android.content.Context;

import com.squareup.otto.Bus;

import java.sql.SQLException;

import javax.inject.Inject;

import dagger.ObjectGraph;
import info.ferrarimarco.uniroma2.msa.resourcesharing.app.dao.GenericDao;
import info.ferrarimarco.uniroma2.msa.resourcesharing.app.model.Resource;
import info.ferrarimarco.uniroma2.msa.resourcesharing.app.model.event.ResourceListAvailableEvent;
import info.ferrarimarco.uniroma2.msa.resourcesharing.app.model.task.ResourceTaskResult;
import info.ferrarimarco.uniroma2.msa.resourcesharing.app.util.ObjectGraphUtils;

public class ResourceService{

    public enum ResourceServiceOperationMode{
        ASYNC,
        SYNC
    }

    protected ObjectGraph objectGraph;

    @Inject
    Bus bus;

    @Inject
    GenericDao<Resource> resourceDao;

    @Inject
    public ResourceService(Context context){
        objectGraph = ObjectGraphUtils.getObjectGraph(context.getApplicationContext());
        objectGraph.inject(this);
    }

    public ResourceTaskResult readResourceLocal(Resource criterion, ResourceServiceOperationMode resourceServiceOperationMode){
        if(criterion == null){
            throw new IllegalArgumentException("criterion cannot be null");
        }

        ResourceTaskResult result = new ResourceTaskResult();

        try{
            resourceDao.open(Resource.class);
            result.getResources().addAll(resourceDao.read(criterion));
        }catch(SQLException e){
            throw new RuntimeException(e);
        }finally{
            resourceDao.close();
        }

        switch(resourceServiceOperationMode){
            case ASYNC:
                bus.post(new ResourceListAvailableEvent(result));
                break;
        }

        return result;
    }

    public ResourceTaskResult saveResourceLocal(Resource resource){
        // -1 is just a placeholder for parcel, it should be autogenerated
        // by the persistence layer
        if(resource.getAndroidId().equals(-1L)){
            resource.setAndroidId(null);
        }

        ResourceTaskResult result = new ResourceTaskResult();
        result.addResource(resource);

        try{
            resourceDao.open(Resource.class);
            resourceDao.save(resource);
        }catch(SQLException e){
            throw new RuntimeException(e);
        }finally{
            resourceDao.close();
        }

        return result;
    }

    public ResourceTaskResult updateResourceLocal(Resource resource){
        // -1 is just a placeholder for parcel, it should be autogenerated
        // by the persistence layer
        if(resource.getAndroidId().equals(-1L) || resource.getAndroidId() == null){
            throw new IllegalArgumentException("cannot update a resource without ID. Resource: " + resource.toString());
        }

        ResourceTaskResult result = new ResourceTaskResult();
        result.addResource(resource);

        try{
            resourceDao.open(Resource.class);
            resourceDao.update(resource);
        }catch(SQLException e){
            throw new RuntimeException(e);
        }finally{
            resourceDao.close();
        }

        return result;
    }

    public ResourceTaskResult deleteResourceLocal(Resource resource){
        ResourceTaskResult result = new ResourceTaskResult();

        try{
            resourceDao.open(Resource.class);
            resourceDao.delete(resource);
        }catch(SQLException e){
            throw new RuntimeException(e);
        }finally{
            resourceDao.close();
        }
        return result;
    }
}
